import numpy as np
import pandas as pd
import json
import requests
import datetime as dt
import time
from datetime import date, datetime
from numpy import nan as npNaN
from pandas_ta.volatility import atr
from pandas_ta.utils import get_offset, pascals_triangle, verify_series
from pandas_ta.overlap import hl2
from binance.client import Client
import warnings

warnings.filterwarnings('ignore')

client = Client("ZOwAm0l1XLQxvDaHGwnsVyUSGuhNqKMAJwqyXmJdCbWmpPFKfwxltuOIJK5UZY3X",
                "Q07zJXytFZMPiTrt5D2oKlvqmyEsn5deizijvwGqto1P8RzAXguD2go05fqWlzmA", {"verify": False, "timeout": 20})

trend = [0]   # 1 if sell and 0 for buy
nextTrend = [0]  # opposite of trend
up = [0]
down = [0]

amplitude = 2
maxLowPrice = None
minHighPrice = None


def sma(source, length):
    sma_out = source.rolling(length).mean()
    return sma_out



def _get_historical_data_(symbol, interval, limit):
    root_url = "https://fapi.binance.com/fapi/v1/klines"
    url = root_url + '?symbol=' + symbol + '&interval=' + interval + '&limit=' + limit
    data = json.loads(requests.get(url).text)
    global df1
    pd.set_option('display.max_columns', None)
    df1 = pd.DataFrame(data)
    df1.columns = ['open_time',
                   'Open', 'High', 'Low', 'Close', 'Volume',
                   'close_time', 'qav', 'num_trades',
                   'taker_base_vol', 'taker_quote_vol', 'ignore']

    df1['Open'] = df1['Open'].astype(float)
    df1['Close'] = df1['Close'].astype(float)
    df1['High'] = df1['High'].astype(float)
    df1['Low'] = df1['Low'].astype(float)
    df1['Volume'] = df1['Volume'].astype(float)

    df1.index = [dt.datetime.fromtimestamp(x / 1000.0) for x in df1.close_time]
    return df1

while True:
    now = datetime.now()
    _get_historical_data_('SOLUSDT', '1m', '150')
    df = df1
    # df = df.iloc[:-1,:]

    high = df['High']
    low = df['Low']
    close = df['Close']
    print(list(high[-4:]))
    print(list(low[-4:]))
    print(list(close[-4:]))

    highma = sma(high, amplitude)
    lowma = sma(low, amplitude)


    if nextTrend[-1] == 1:
        print('inside 1st if loop')
        maxLowPrice = max(low[-3], low[-2], low[-1])                                                #(lowPrice, maxLowPrice)

        if highma[-1] < maxLowPrice and close[-1] < low[-2]:            #low[-2] if low[-1] == float('nan') else low[-1]:
            print('inside 1st if loop then if subloop')
            trend.append(1)
            nextTrend.append(0)
            minHighPrice = max(high[-3], high[-2], high[-1])                                        #highPrice

    else:
        print('inside 1st else loop')
        minHighPrice = min(high[-3], high[-2], high[-1])                                              #(highPrice, minHighPrice)

        if lowma[-1] > minHighPrice and close[-1] > high[-2]:               #high[-2] if high[-1] == float('nan') else high[-1]:
            print('inside 1st else loop then if subloop')
            trend.append(0)
            nextTrend.append(1)
            maxLowPrice = min(low[-3], low[-2], low[-1])                                              #lowPrice

    if trend[-1] == 0:                              # if not True if trend[-2] == float('nan') else False and trend[-2] != 0:
        print('inside 2nd if loop')
        if len(trend) > 1 and trend[-2] == 0:
            print('inside 2nd if loop then if subloop')
            up.append(down[-2] if len(down) > 1 else down[-1])                                                  #down[-1] if down[-2] == float('nan') else down[-2]
        else:
            print('inside 2nd if loop then else subloop')
            up.append(max(low[-1], up[-2]) if len(up) > 1 else low[-1])                    #maxLowPrice if up[-2] == float('nan') else max(maxLowPrice, up[-2])

    else:
        print('inside 2nd else loop')
        if len(trend) > 1 and trend[-2] == 1:                              # if not True if trend[-2] == float('nan') else False and trend[-2] != 1:
            print('inside 2nd else loop then if subloop')
            down.append(up[-2] if len(up) > 1 else up[-1])                                              #up[-1] if up[-2] == float('nan') else up[-2]
        else:
            print('inside 2nd else loop then else subloop')
            down.append(min(high[-1], down[-2]) if len(down) > 2 else high[-1])        #minHighPrice if down[-2] == float('nan') else min(minHighPrice, down[-2])


    ht = up[-1] if trend[-1] == 0 else down[-1]
    call = 'buy' if trend[-1] == 0 else 'sell'

    print(f'high: {high[-1]} low: {low[-1]} close: {close[-1]}')
    print(f'maxLowPrice: {maxLowPrice} minHighPrice: {minHighPrice}')
    print(f'lowma: {lowma[-1]} highma: {highma[-1]}')
    print(f'trend: {trend} nextTrend: {nextTrend} ht: {ht}')
    print(f'up: {up} down: {down}')
    print(df.index[-1], call)
    print(len(trend), len(nextTrend), len(up), len(down))
    # print(type(trend), type(nextTrend), type(up), type(down))
    print('===================*************====================')

    time.sleep(900)